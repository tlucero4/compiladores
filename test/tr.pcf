let rec mult2 (m m2 n : Nat) : Nat = ifz n then m else mult2 (m + m2) m2 (pred n)
let mult (m n : Nat) : Nat = ifz n then 0 else mult2 m m (pred n)
let rec exp2 (m m2 n : Nat) : Nat = ifz n then m else exp2 (mult m m2) m2 (pred n)
let exp (m n : Nat) : Nat = ifz n then 1 else exp2 m m (pred n)
let rec fact2 (n n2 : Nat) : Nat = ifz n2 then n else fact2 (mult n n2) (pred n2)
let fact (n : Nat) : Nat = fact2 n (pred n)
let _ : Nat = print ((fact 5) + (fact 5))
