type Bool = Nat
type Pair = Bool -> Nat
let true : Bool = 1
let false : Bool = 0
let ifthenelse (c : Bool) (t : Nat) (e : Nat) : Nat = ifz c then t else e

let pair (a b : Nat ) (c : Bool) : Nat = ifthenelse c a b
let proj1 (f : Nat -> Nat) : Nat = f 0
let proj2 (f : Nat -> Nat) : Nat = f 1

let suma5 (x : Nat) : Nat = x + 5

let rec gcd (m : Nat) (n : Nat) : Nat = ifz n then m else (ifz m then n else (ifz (n - m) then gcd (m - n) n else gcd m (n - m)))

let p : Pair = pair (4 + 7) (suma5 2)
let x : Nat = print ((proj1 p) * (proj2 p))
