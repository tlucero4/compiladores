let suma (m n s : Nat) : Nat = m + m + m + n + n + s
let fib (n : Nat) : Nat = (let x : Nat = (succ n) in x + n)
let anterior : Nat -> Nat = pred
let y : Nat -> Nat = suma (ifz 0 then 5 else 1) (fib 3)
let _ : Nat = print (y 6)

Let (1,1) "m'" NatTy (Const (4,41) (CNat 5)) (Let (1,1) "n'" NatTy (Let (2,1) "n'" NatTy (Const (4,55) (CNat 3)) (Let (2,28) "x" NatTy (App (2,43) (Lam (2,43) "x" NatTy (BinaryOp (2,43) Add (V (2,43) (Bound 0)) (Const (2,43) (CNat 1)))) (V (2,49) (Bound 0))) (BinaryOp (2,54) Add (V (2,56) (Bound 0)) (V (2,59) (Bound 1))))) (Lam (1,1) "s" NatTy (BinaryOp (1,32) Add (V (1,34) (Bound 2)) (BinaryOp (1,36) Add (V (1,38) (Bound 2)) (BinaryOp (1,40) Add (V (1,42) (Bound 2)) (BinaryOp (1,44) Add (V (1,46) (Bound 1)) (BinaryOp (1,48) Add (V (1,50) (Bound 1)) (V (2,1) (Bound 0)))))))))
